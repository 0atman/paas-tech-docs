# Managing apps

## Connecting with SSH

When you deploy an app to GOV.UK PaaS, it runs in an isolated [container](https://www.cloudfoundry.org/containers/).

You can connect directly to an appâ€™s container using SSH. XYZ enables SSH by default. A common use case for this is that you cannot troubleshoot your app using [`cf logs` and `cf events`](/monitoring_apps.html#logs).

If you do run commands which will change the container temporarily, you should then restart the app.

In most cases, you will find that you can SSH directly to your app's container.

You must have installed the Cloud Foundry Command Line Interface (CLI) for SSH to work.

<%= warning_text('If you are using v3 of the Cloud Foundry API, you must run cf v3-ssh instead of cf ssh') %>

1. Run:

    ```
    cf ssh APPNAME
    ```

    where `APPNAME` is the name of the app.

2. For some tasks to work, you must set up the interactive SSH session to match the buildpack environment. To do this, run the following script inside the container when you start a new SSH session:

    ```
    /tmp/lifecycle/shell
    ```

3. When you're finished using SSH, run `exit` to end the session.

For more information, refer to the [Cloud Foundry documentation on SSH session environment](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html#ssh-env).

### Handshake failure error

If you get the following error, see the [documentation on enabling SSH for an app](/troubleshooting.html#enabling-ssh-for-an-app):

```
FAILED
Error opening SSH connection: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain
```

You do not need to generate any SSH keys. The Cloud Foundry CLI handles authentication for you.

### Connecting with multiple instances

If you are running [multiple instances](/managing_apps.html#scaling) of an app, you can SSH to a specific instance.

Each instance of an app has an attached number.

1. Run `cf app APPNAME` to see the app instance numbers in the output. For example:

    ```
    requested state: started
    instances: 3/3
    usage: 64M x 3 instances
    urls: APPNAME.london.cloudapps.digital
    last uploaded: Wed Dec 21 13:56:24 UTC 2016
    stack: cflinuxfs3
    buildpack: staticfile_buildpack

    .   state     since                    cpu    memory        disk         details
    0   running   2016-12-21 02:27:11 PM   3.0%   7.1M of 64M   6.8M of 1G
    1   running   2016-12-21 02:44:46 PM   1.0%   3.5M of 64M   6.8M of 1G
    2   running   2016-12-21 02:44:46 PM   1.0%   3.5M of 64M   6.8M of 1G
    ```

1. Run `cf ssh --app-instance-index APP_INSTANCE_NUMBER` to connect to a specific instance.

For example, `cf ssh --app-instance-index 2` connects to the last app instance in the example.

### Creating TCP tunnels with SSH

You can manually create a TCP tunnel with SSH to connect your local machine to your remote backing service instance.

The `cf ssh` command supports [local port forwarding](https://en.wikipedia.org/wiki/Port_forwarding#Local_port_forwarding), which allows you to create tunnels from your local system to the application instance container. This is useful when you want to connect from your local system to a backing service that is only accessible from an app running on GOV.UK PaaS.

To enable local port forwarding, you can use the parameter `-L`:

```
cf ssh APPNAME -T -L LOCALPORT:REMOTEHOST:REMOTEPORT
```

This will forward the `LOCALPORT` port on the local system to the given `REMOTEHOST` host and `REMOTEPORT` port on the application container side.

Whenever a connection is made to this port, the connection is forwarded over the secure SSH channel, and a connection is made to the host and port `REMOTEHOST:REMOTEPORT` from the remote application container.

You can use the `-L` parameter multiple times to forward different ports.

The tunnel will be closed once the `cf ssh` command is stopped.

For example, you can connect directly to the PostgreSQL service bound to an application following these steps:

 1. Find the details of the service using `cf env APPNAME`. Here is some simplified and shortened example output:

    ```
    $ cf env myapp
    Getting env variables for app myapp in org myoth / space myorg as randomuser...
    OK

        System-Provided:
        {
        "VCAP_SERVICES": {
         "postgres": [
         {
         "credentials": {
         "host": "rdsbroker-01-ff-d2.cwm.eu-west-1.rds.amazonaws.com",
         "jdbcUrl": "jdbc:postgresql://rdsbroker-01-ff-d2.cwm.eu-west-1.rds.amazonaws.com:5432/rdsbroker_9f0_97_aa4?user=rdsbroker_9f0_97_aa4_owner\u0026password=xnYXthsgUFwPUOO",
         "name": "rdsbroker_9f0_97_aa4",
         "password": "xnYXthsgUFwPUOO",
         "port": 5432,
         "uri": "postgres://rdsbroker_9f0_97_aa4_owner:xnYXthsgUFwPUOO@rdsbroker-01-ff-d2.cwm.eu-west-1.rds.amazonaws.com:5432/rdsbroker_9f0_97_aa4",
         "username": "rdsbroker_9f0_97_aa4_owner"
        },
        ...
    ```

    You will need to know:
    + the remote host, displayed as `"host":`
    + the remote port, displayed as `"port"`.
    + the PostgreSQL username, displayed as `"username":`
    + the PostgreSQL password, displayed as `password:`
    + the name of the database, displayed as `name:`

 2. Create a SSH tunnel using the local port 6666:

    ```
    cf ssh myapp -T -L 6666:HOST:PORT
    ```

    where HOST and PORT are the values you found in the previous step.

    This will open a shell in the remote container, and create a local tunnel using port 6666.

    Note: Be aware that this shell is in the remote application container, not the local system. You will need to open a new console if you want to work locally. The new port is open in the local system.


 3. In a different terminal, you can now connect to the local port in `localhost:6666` using a postgres client:

    ```
    psql postgres://USERNAME:PASSWORD@localhost:6666/DATABASE_NAME
    ```

    replacing USERNAME, PASSWORD and DATABASE_NAME with the values from step 1

    You can also dump the database with [`pg_dump`](https://www.postgresql.org/docs/9.5/static/backup-dump.html):

    ```
    pg_dump postgres://USERNAME:PASSWORD@localhost:6666/DATABASE_NAME > db.dump
    ```

You can also use the [Conduit plugin](/guidance.html#conduit) to connect your local system to your remote backing service instance.

### SSH permissions

You can enable and disable SSH independently for each space and app.

You must enable SSH for both the space and the app before it will work.

All new apps and spaces have SSH enabled by default.

### Enabling SSH for an app

If you unexpectedly find that you can't SSH to an app, the most likely cause is that SSH access is disabled for that app. This may be the case if your app was deployed before we enabled SSH access for tenants (prior to around 1600 GMT on 1st December 2016).

To check if SSH is enabled for an app, run:

```
cf ssh-enabled APPNAME
```

where `APPNAME` is the name of the app.

If you get a message stating that SSH support is disabled for that app, you need to enable SSH for the app by running:

```
cf enable-ssh APPNAME
```

If you are running multiple instances of an app (created with `cf scale` or with `instances:` in the manifest), the ``enable-ssh`` command affects all running instances of an app.

### Enabling SSH for a space

If enabling SSH for an app doesn't let you connect, check that SSH is enabled for the space it's deployed in.

Check what space you're working in with:

```
cf target
```

Then run:

```
cf space-ssh-allowed SPACENAME
```

where SPACENAME is the name of the space.

If you get a message like this:

```
ssh support is disabled in space 'sandbox'
```

you need to enable SSH for the space using:

```
cf allow-space-ssh SPACENAME
```

Your GOV.UK PaaS account needs the ``OrgManager`` or ``SpaceManager`` role to be able to enable SSH for a space. If the command above fails, ask someone with the correct role (probably a senior member of your team) to run it for you, or contact us at [gov-uk-paas-support@digital.cabinet-office.gov.uk](mailto:gov-uk-paas-support@digital.cabinet-office.gov.uk).


### Limiting SSH access

You should consider disabling SSH where it is not needed. For example, if you host the live versions of your apps in a ``production`` space, you may decide to disable SSH access there, but leave it enabled in your ``development`` and ``testing`` spaces.

### More about using SSH

Refer to the [Cloud Foundry documentation on Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html).
